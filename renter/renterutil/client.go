package renterutil

import (
	"errors"
	"math"
	"math/rand"
	"strings"

	"gitlab.com/NebulousLabs/Sia/crypto"
	"gitlab.com/NebulousLabs/Sia/modules"
	"gitlab.com/NebulousLabs/Sia/node/api/client"
	"gitlab.com/NebulousLabs/Sia/types"
	"lukechampine.com/us/hostdb"
	"lukechampine.com/us/renter"
	"lukechampine.com/us/renter/proto"
)

// ErrNoHostAnnouncement is returned when a host announcement cannot be found.
var ErrNoHostAnnouncement = errors.New("host announcement not found")

// SiadClient wraps the siad API client. It satisfies the proto.Wallet,
// proto.TransactionPool, and renter.HostKeyResolver interfaces. The
// proto.Wallet methods require that the wallet is unlocked.
type SiadClient struct {
	siad *client.Client
}

// ChainHeight returns the current block height.
func (c *SiadClient) ChainHeight() (types.BlockHeight, error) {
	cg, err := c.siad.ConsensusGet()
	return cg.Height, err
}

// Synced returns whether the siad node believes it is fully synchronized with
// the rest of the network.
func (c *SiadClient) Synced() (bool, error) {
	cg, err := c.siad.ConsensusGet()
	return cg.Synced, err
}

// AcceptTransactionSet submits a transaction set to the transaction pool,
// where it will be broadcast to other peers.
func (c *SiadClient) AcceptTransactionSet(txnSet []types.Transaction) error {
	if len(txnSet) == 0 {
		return errors.New("empty transaction set")
	}
	txn, parents := txnSet[len(txnSet)-1], txnSet[:len(txnSet)-1]
	return c.siad.TransactionPoolRawPost(txn, parents)
}

// FeeEstimate returns the current estimate for transaction fees, in Hastings
// per byte.
func (c *SiadClient) FeeEstimate() (minFee, maxFee types.Currency, err error) {
	tfg, err := c.siad.TransactionPoolFeeGet()
	return tfg.Minimum, tfg.Maximum, err
}

// NewWalletAddress returns a new address generated by the wallet.
func (c *SiadClient) NewWalletAddress() (types.UnlockHash, error) {
	res, err := c.siad.WalletLastAddressesGet(4096)
	if err == nil && len(res.Addresses) != 0 {
		return res.Addresses[rand.Intn(len(res.Addresses))], nil
	}

	wag, err := c.siad.WalletAddressGet()
	return wag.Address, err
}

// SignTransaction adds the specified signatures to the transaction using
// private keys known to the wallet.
func (c *SiadClient) SignTransaction(txn *types.Transaction, toSign []crypto.Hash) error {
	wspr, err := c.siad.WalletSignPost(*txn, toSign)
	if err == nil {
		*txn = wspr.Transaction
	}
	return err
}

// UnspentOutputs returns the set of outputs tracked by the wallet that are
// spendable.
func (c *SiadClient) UnspentOutputs(limbo bool) ([]modules.UnspentOutput, error) {
	wug, err := c.siad.WalletUnspentGet()
	if !limbo {
		noLimbo := wug.Outputs[:0]
		for _, o := range wug.Outputs {
			if o.ConfirmationHeight != math.MaxUint64 {
				noLimbo = append(noLimbo, o)
			}
		}
		wug.Outputs = noLimbo
	}
	return wug.Outputs, err
}

// UnconfirmedParents returns any currently-unconfirmed parents of the specified
// transaction.
func (c *SiadClient) UnconfirmedParents(txn types.Transaction) ([]types.Transaction, error) {
	return nil, nil // not supported
}

// UnlockConditions returns the UnlockConditions that correspond to the
// specified address.
func (c *SiadClient) UnlockConditions(addr types.UnlockHash) (types.UnlockConditions, error) {
	wucg, err := c.siad.WalletUnlockConditionsGet(addr)
	return wucg.UnlockConditions, err
}

// HostDB

// LookupHost returns the host public key matching the specified prefix.
func (c *SiadClient) LookupHost(prefix string) (hostdb.HostPublicKey, error) {
	if !strings.HasPrefix(prefix, "ed25519:") {
		prefix = "ed25519:" + prefix
	}
	hdag, err := c.siad.HostDbAllGet()
	if err != nil {
		return "", err
	}
	var hpk hostdb.HostPublicKey
	for i := range hdag.Hosts {
		key := hostdb.HostPublicKey(hdag.Hosts[i].PublicKeyString)
		if strings.HasPrefix(string(key), prefix) {
			if hpk != "" {
				return "", errors.New("ambiguous pubkey")
			}
			hpk = key
		}
	}
	if hpk == "" {
		return "", errors.New("no host with that pubkey")
	}
	return hpk, nil
}

// ResolveHostKey resolves a host public key to that host's most recently
// announced network address.
func (c *SiadClient) ResolveHostKey(pubkey hostdb.HostPublicKey) (modules.NetAddress, error) {
	hhg, err := c.siad.HostDbHostsGet(pubkey.SiaPublicKey())
	if err != nil && strings.Contains(err.Error(), "requested host does not exist") {
		return "", ErrNoHostAnnouncement
	}
	return hhg.Entry.NetAddress, err
}

// NewSiadClient returns a SiadClient that communicates with the siad API
// server at the specified address.
func NewSiadClient(addr, password string) *SiadClient {
	c := client.New(client.Options{
		Address:   addr,
		Password:  password,
		UserAgent: "Sia-Agent",
	})
	return &SiadClient{siad: c}
}

// verify that clients satisfy their intended interfaces
var (
	_ interface {
		proto.Wallet
		proto.TransactionPool
		renter.HostKeyResolver
	} = (*SiadClient)(nil)
)
